// directional light effect
{
	"name"				: "directional light",
	"attributeBindings"	: {
		"position"				: "geometry/vertex/attribute/position",
		"normal"				: "geometry/vertex/attribute/normal",
		"uv"					: "geometry/vertex/attribute/uv"
	},
	"uniformBindings"	: {
		"diffuseColor"			: "material/diffuse/rgba",
		"diffuseMap"			: "material/diffuse/map",
		"modelToWorldMatrix"	: "transform/modelToWorldMatrix",
		"worldToScreenMatrix"	: "transform/worldToScreenMatrix",
		"lightDirection"		: "light/direction"
	},
	"stateBindings"	: {
		"blendMode"				: "material/blendMode"
	},
	"macroBindings"	: {
		"TECHNIQUE_DIFFUSE_MAP"	: "material/diffuse/map"
	},

	"priority"		: 0,
	"blendMode"		: ["one", "zero"],
	"depthTest"		: [true, "less"],
	
	"includes"		: [ "Phong.glsl" ],
	
	"passes"		: [{
		"vertexShader"	: "
			attribute vec3 position;
			attribute vec3 normal;
			attribute vec3 uv;

			varying vec3 worldNormal;
			varying vec2 vertexUV;

			uniform mat4 modelToWorldMatrix;
			uniform mat4 worldToScreenMatrix;

			void main(void)
			{
				#ifdef TECHNIQUE_DIFFUSE_MAP
					vertexUV = uv;
				#endif

				worldNormal = normalize(mat3(modelToWorldMatrix) * normal);

				gl_Position =  worldToScreenMatrix * modelToWorldMatrix * vec4(position, 1.0);
			}
		",
		"fragmentShader"	: "
			precision highp float;

			uniform vec4 diffuseColor	= vec4(0, 0, 0, 1);
			uniform vec3 lightDirection	= vec3(0., 0., -1.);
			uniform sampler2D diffuseMap;

			varying vec3 worldNormal;
			varying vec2 vertexUV;

			void main(void)
			{
				#ifdef TECHNIQUE_DIFFUSE_MAP
					vec4 diffuse = texture2D(diffuseMap, vertexUV);
				#else
					vec4 diffuse = diffuseColor;
				#endif;

				gl_FragColor = vec4(diffuse.rgb * lambert(worldNormal, lightDirection), diffuse.a);
			}
		"
	}]
}
