// pseudo lens flare effect
{
	"name" 		: "pseudo lens flare",
	
	"attributeBindings" : {
		"aPosition"		: "geometry.vertex.attribute.position",
		"aUv"			: "geometry.vertex.attribute.uv"
	},
	
	"passes"	: [
		{
			"name" : "downsample and threshold",
			"uniformBindings" : {
				"uInputTex"		: "backbuffer",
				"uScale"		: [0.5, 0.5, 0.5, 1.0],
				"uBias"			: [-0.2, -.2, -.2, 0.0]
			},
			"triangleCulling" : "none",
			"target" : { "name" : "lensflare_downsample", "size" : 256 },
			"vertexShader" : {
				"includes"	: [ "PseudoLensFlare.vertex.glsl" ]
			},
			"fragmentShader" : {
				"includes" : [ "Threshold.fragment.glsl" ]
			}
		},
		{
			"name" : "lens features",
			"uniformBindings" : {
				"uInputTex"			: "lensflare_downsample",
				"uGhosts"			: 5,
				"uGhostDispersal"	: 0.1,
				"uTextureSize"		: [ 256., 256. ],
				"uHaloWidth"		: 0.5
			},
			"triangleCulling" : "none",
			"target" : { "name" : "lensflare_features", "size" : 256 },
			"vertexShader" : {
				"includes"	: [ "PseudoLensFlare.vertex.glsl" ]
			},
			"fragmentShader" : {
				"includes" : [ "LensFeatures.fragment.glsl" ]
			}
		},
		{
			"name" : "lens compositing",
			"uniformBindings" : {
				"uBackbuffer"	: "backbuffer",
				"uFeatures"		: "lensflare_features"
			},
			"triangleCulling" : "none",
			"vertexShader" : {
				"includes" : [ "PseudoLensFlare.vertex.glsl" ]
			},
			"fragmentShader" : "
				#ifdef GL_ES
				precision mediump float;
				#endif
				
				uniform sampler2D uBackbuffer;
				uniform sampler2D uFeatures;
				
				varying vec2 vTexcoord;
				
				void main(void)
				{
					gl_FragColor = texture2D(uBackbuffer, vTexcoord) + texture2D(uFeatures, vTexcoord);
				}
			"
		}
	]
}
