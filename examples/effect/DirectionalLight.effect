// directional light effect
{
	"name"				: "directional light",
	"attributeBindings"	: {
		"position"				: "geometry.vertex.attribute.position",
		"normal"				: "geometry.vertex.attribute.normal",
		"uv"					: "geometry.vertex.attribute.uv"
	},
	"uniformBindings"	: {
		"modelToWorldMatrix"	: "transform.modelToWorldMatrix",
		"worldToScreenMatrix"	: "transform.worldToScreenMatrix",
		"lightDirection"		: "light.direction",
		"ambientColor"			: "light.ambient.rgba",
		"lightColor"			: "light.diffuse.rgba",
		"cameraPosition"		: "camera.position"
	},
	"stateBindings"	: {
		"blendMode"				: "material.blendMode"
	},
	"macroBindings"	: {
		"DIFFUSE_MAP"			: "material.diffuseMap",
		"SPECULAR"				: "material.shininess",
		"SPECULAR_MAP"			: "material.specularMap",
		"NORMAL_MAP"			: "material.normalMap"
	},

	"priority"			: 0,
	"blendMode"			: ["one", "zero"],
	"depthTest"			: [ true, "less" ],
	"triangleCulling"	: "none",
	
	"samplerStates"	: {
		"diffuseMap"	: { "wrapMode" : "repeat", "textureFilter" : "linear", "mipFilter" : "none" },
		"specularMap"	: { "wrapMode" : "repeat", "textureFilter" : "linear", "mipFilter" : "none" },
		"normalMap"		: { "wrapMode" : "repeat", "textureFilter" : "linear", "mipFilter" : "none" }
	},

	"includes"		: [ "Phong.glsl" ],

	"passes"		: [{
		"vertexShader"	: "
			attribute vec3	position;
			attribute vec3	normal;
			attribute vec3	uv;

			varying vec3	worldPosition;
			varying vec3	worldNormal;
			varying vec2	vertexUV;
			varying vec3	eyeVec;

			uniform mat4	modelToWorldMatrix;
			uniform mat4	worldToScreenMatrix;

			void main(void)
			{
				vec4 pos = modelToWorldMatrix * vec4(position, 1.0);

				#ifdef SPECULAR
					worldPosition = pos.xyz;
				#endif

				#ifdef DIFFUSE_MAP
					vertexUV = uv;
				#endif

				worldNormal = normalize(mat3(modelToWorldMatrix) * normal);
				
				gl_Position =  worldToScreenMatrix * pos;
			}
		",
		"fragmentShader"	: "

			struct Material {
				sampler2D	diffuseMap;
				vec4		diffuseColor;
				vec3		specular;
				float		shininess;
				sampler2D	specularMap;
				sampler2D	normalMap;
			};

			struct DirectionalLight {
				vec3 direction;
				vec3 diffuse;
				vec3 specular;
				vec3 ambient;
			};

			uniform	Material			material;
			uniform DirectionalLight	light;
			uniform vec3				cameraPosition;

			varying vec3		worldPosition;
			varying vec3		worldNormal;
			varying vec2		vertexUV;

			void main(void)
			{
				#ifdef DIFFUSE_MAP
					vec4 diffuse = texture2D(material.diffuseMap, vertexUV);
				#else
					vec4 diffuse = material.diffuseColor;
				#endif;

				light.direction = normalize(-light.direction);
				worldNormal = normalize(worldNormal);

				// ambient + diffuse lighting
				diffuse.rgb *= light.ambient + phong_diffuseReflection(worldNormal, light.direction, light.diffuse);

				// specular lighting
				#ifdef SPECULAR
					diffuse.rgb += phong_specularReflection(
						worldNormal,
						light.direction,
						normalize(cameraPosition - worldPosition),
						material.specular * light.specular,
						material.shininess
					);
				#endif // SPECULAR

				#ifdef SPECULAR_MAP
					vec4 specular	= texture2D(material.specularMap, vertexUV);
					diffuse.rgb += phong_specularReflection(
						worldNormal,
						light.direction,
						normalize(cameraPosition - worldPosition),
						specular * light.specular,
						material.shininess
					);
				#endif // SPECULAR_MAP
				
				#ifdef NORMAL_MAP
					/*
					vec4 normal	= texture2D(material.normalMap, vertexUV);
					diffuse.rgb = normal.rgb;
					*/
				#endif // NORMAL_MAP
				
				gl_FragColor = diffuse;
			}
		"
	}]
}
