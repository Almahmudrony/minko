// light scattering
{
    "name"  : "light scattering",

    "techniques":
    [
        {
            "passes":
            [
                {
                    "attributes" :
                    {
                        "aPosition"     : "geometry[${geometryUuid}].position",
                        "aUV"           : "geometry[${geometryUuid}].uv"
                    },

                    "uniforms"   :
                    {
                        "lightPositionOnScreen" : "material[${materialUuid}].lightPositionOnScreen",
                        "uInputTex" : "material[${materialUuid}].backbuffer"
                    },

                    "vertexShader"      :
                    "
                        attribute vec3 aPosition;
                        attribute vec2 aUV;

                        varying vec2 vVertexUV;

                        void main(void)
                        {
                            vVertexUV = vec2(aUV.x, 1 - aUV.y);
                            gl_Position = vec4(aPosition, 1) * vec4(1., 1., 1., .5);
                        }
                    ",

                    "fragmentShader"    :
                    "
                        uniform vec2 lightPositionOnScreen;
                        uniform sampler2D uInputTex;

                        const float decay = 0.95;
                        const float weight = 0.90;
                        const float exposure = 0.40;
                        const float density = 0.926;

                        const int NUM_SAMPLES = 1;

                        varying vec2 vVertexUV;

                        void main()
                        {
                            // vec4 pixel = texture2D(uInputTex, vVertexUV);

                            // gl_FragColor = pixel;

                            vec2 deltaTextCoord = vec2( gl_TexCoord[0].st - lightPositionOnScreen.xy );
                            vec2 textCoo = gl_TexCoord[0].st;
                            deltaTextCoord *= 1.0 / float(NUM_SAMPLES) * density;
                            float illuminationDecay = 1.0;

                            for (int i = 0; i < NUM_SAMPLES; i++)
                            {
                                textCoo -= deltaTextCoord;
                                vec4 sample = texture2D(uInputTex, textCoo);

                                sample *= illuminationDecay * weight;

                                gl_FragColor += sample;

                                illuminationDecay *= decay;
                             }

                             gl_FragColor *= exposure;
                        }
                    "
                }
            ],
            "unusedPasses" :
            [
                {
                    "attributes" :
                    {
                        "aPosition"     : "geometry[${geometryUuid}].position",
                        "aUV"           : "geometry[${geometryUuid}].uv"
                    },
                    "uniforms"          : {
                        "uLightPositionOnScreen"     : "material[${materialId}].lightPositionOnScreen"
                    },
                    "triangleCulling"   : "none",
                    "states" : {
                        "target" : {
                            "name" : "lightscattering_target_1",
                            "size" : 256
                        },
                        "colorMask": 0
                    },
                    "vertexShader" :
                    "
                        attribute vec3 aPosition;
                        attribute vec2 aUV;

                        void main(void)
                        {
                            gl_Position = vec4(aPosition, 1) * vec4(1., 1., 1., .5);
                        }
                    ",
                    "fragmentShader" :
                    "
                        void main()
                        {
                            gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
                        }
                    "
                },

                {
                    "name" : "downsample and threshold",
                    "uniformBindings" : {
                        "uInputTex"     : "material[${materialId}].backbuffer"
                    },
                    "triangleCulling" : "none",
                    "target" : { "name" : "lensflare_downsample", "size" : 256.0},
                    "samplerStates" : {
                        "uInputTex" : { "textureFilter" : "linear" }
                    },
                    "vertexShader" : "#pragma include('PseudoLensFlare.vertex.glsl')",
                    "fragmentShader" : "#pragma include('Threshold.fragment.glsl')"
                },
                {
                    "name" : "lens features",
                    "uniformBindings" : {
                        "uInputTex"         : "lensflare_downsample",
                        "uDispersal"        : 0.3,
                        "uTextureSize"      : [ 256.0, 256.0 ],
                        "uHaloWidth"        : 0.45,
                        "uDistortion"       : 10.0,
                        "uLensColor"        : { "default" : "lens-color.png" }
                    },
                    "macroBindings" : {
                        "NUM_SAMPLES"       : { "default" : 6 }
                    },
                    "triangleCulling" : "none",
                    "target" : { "name" : "lensflare_features", "size" : 256 },
                    "samplerStates" : {
                        "uInputTex" : { "textureFilter" : "linear" }
                    },
                    "vertexShader" : "#pragma include('PseudoLensFlare.vertex.glsl')",
                    "fragmentShader" : "#pragma include('LensFeatures.fragment.glsl')"
                },
                {
                    "name"  : "gaussian blur horizontal",
                    "uniformBindings" : {
                        "uTexture"      : "lensflare_features",
                        "uTextureSize"  : 256.0
                    },
                    "attributeBindings" : {
                        "aPosition" : "geometry[${geometryId}].position",
                        "aUv"       : "geometry[${geometryId}].uv"
                    },
                    "triangleCulling" : "none",
                    "target" : { "name" : "lensflare_blur_h", "size" : 256 },
                    "samplerStates" : {
                        "uTexture"  : { "textureFilter" : "linear" }
                    },
                    "vertexShader" : "#pragma include('GaussianBlur.vertex.glsl')",
                    "fragmentShader" : "#pragma include('HGaussianBlur.fragment.glsl')"
                },
                {
                    "name"  : "gaussian blur vertical",
                    "uniformBindings" : {
                        "uTexture"      : "lensflare_blur_h",
                        "uTextureSize"  : 256.0
                    },
                    "attributeBindings" : {
                        "aPosition" : "geometry[${geometryId}].position",
                        "aUv"       : "geometry[${geometryId}].uv"
                    },
                    "triangleCulling" : "none",
                    "target" : "lensflare_features",
                    "samplerStates" : {
                        "uTexture"  : { "textureFilter" : "linear" }
                    },
                    "vertexShader" : "#pragma include('GaussianBlur.vertex.glsl')",
                    "fragmentShader" : "#pragma include('VGaussianBlur.fragment.glsl')"
                },
                {
                    "name" : "lens compositing",
                    "uniformBindings" : {
                        "uBackbuffer"       : "material[${materialId}].backbuffer",
                        "uFeatures"         : "lensflare_features",
                        "uArtefactsScale"   : { "property" : "artefactsScale", "default" : 1.0 },
                        "uDirt"             : { "default" : "lens-dirt.png" },
                        "uBurst"            : { "default" : "lens-star.png" }
                    },
                    "triangleCulling" : "none",
                    "samplerStates" : {
                        "uBackbuffer"   : { "textureFilter" : "linear" },
                        "uFeatures"     : { "textureFilter" : "linear" },
                        "uDirt"         : { "textureFilter" : "linear" },
                        "uBurst"        : { "textureFilter" : "linear" }
                    },
                    "vertexShader" : "#pragma include('PseudoLensFlare.vertex.glsl')",
                    "fragmentShader" : "
                        #ifdef GL_ES
                        precision mediump float;
                        #endif

                        uniform sampler2D uBackbuffer;
                        uniform sampler2D uFeatures;
                        uniform sampler2D uDirt;
                        uniform sampler2D uBurst;
                        uniform float uArtefactsScale;

                        varying vec2 vTexcoord;

                        void main(void)
                        {
                            gl_FragColor = texture2D(uFeatures, vTexcoord) * (texture2D(uDirt, vTexcoord) + texture2D(uBurst, vTexcoord))
                                * vec4(vec3(uArtefactsScale), 1.0);
                            gl_FragColor += texture2D(uBackbuffer, vTexcoord);
                        }
                    "
                }
            ]
        }
    ]
}
