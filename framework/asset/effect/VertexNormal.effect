{
	"name" : "vertex-normal",

	"attributes" : {
		"aPosition"		: "geometry[${geometryUuid}].position",
		"aNormal"		: "geometry[${geometryUuid}].normal",
		"aBoneIdsA"		: "geometry[${geometryUuid}].boneIdsA",
		"aBoneIdsB"		: "geometry[${geometryUuid}].boneIdsB",		
		"aBoneWeightsA"	: "geometry[${geometryUuid}].boneWeightsA",
		"aBoneWeightsB"	: "geometry[${geometryUuid}].boneWeightsB"
	},

	"uniforms" : {
        "uModelToWorldMatrix"	: "modelToWorldMatrix",
		"uWorldToScreenMatrix"	: { "binding" : { "property" : "worldToScreenMatrix", "source" : "renderer" } },
		"uBoneMatrices[0]"		: "geometry[${geometryUuid}].boneMatrices",
		"uNumBones"				: "geometry[${geometryUuid}].numBones",
        "uPopLod"               : "geometry[${geometryUuid}].popLod",
        "uPopBlendingLod"       : "geometry[${geometryUuid}].popBlendingLod",
        "uPopFullPrecisionLod"  : "geometry[${geometryUuid}].popFullPrecisionLod",
        "uPopMinBound"          : "geometry[${geometryUuid}].popMinBound",
        "uPopMaxBound"          : "geometry[${geometryUuid}].popMaxBound"
	},

	"macros" : {
		"MODEL_TO_WORLD"		: "modelToWorldMatrix",
		"SKINNING_NUM_BONES"	: { "binding" : "geometry[$geometryUuid].numBones", "type" : "int" },
        "POP_LOD_ENABLED"       : "geometry[${geometryUuid}].popLodEnabled",
        "POP_BLENDING_ENABLED"  : "geometry[${geometryUuid}].popBlendingEnabled"
	},

    "techniques" : [{
    	"passes"	: [{
		    "vertexShader" : "
                #ifdef GL_ES
                    #ifdef GL_FRAGMENT_PRECISION_HIGH
                        precision highp float;
                    #else
                        precision mediump float;
                    #endif
                #endif

			    uniform mat4 uModelToWorldMatrix;
			    uniform mat4 uWorldToScreenMatrix;

			    attribute vec3 aPosition;
			    attribute vec3 aNormal;

				#ifdef SKINNING_NUM_BONES
				attribute vec4 aBoneWeightsA;
				attribute vec4 aBoneWeightsB;
				#endif

				uniform float uPopLod;
				uniform float uPopBlendingLod;
				uniform float uPopFullPrecisionLod;
				uniform vec3 uPopMinBound;
				uniform vec3 uPopMaxBound;

			    varying vec3 worldNormal;

			    #pragma include \"Skinning.function.glsl\"
			    #pragma include \"Pop.function.glsl\"

			    void main(void)
			    {
				    vec4 pos = vec4(aPosition, 1.0);
					vec4 n = normalize(vec4(aNormal, 0.0)); 

				
				    #ifdef SKINNING_NUM_BONES
					    pos = skinning_moveVertex(pos, aBoneWeightsA, aBoneWeightsB);
					    n = skinning_moveVertex(n, aBoneWeightsA, aBoneWeightsB);
				    #endif // SKINNING_NUM_BONES

    				#ifdef POP_LOD_ENABLED
    				    #ifdef POP_BLENDING_ENABLED
    				        pos = pop_blend(pos, aNormal, uPopLod, uPopBlendingLod, uPopFullPrecisionLod, uPopMinBound, uPopMaxBound);
    				    #else
    				        pos = pop_quantify(pos, aNormal, uPopLod, uPopFullPrecisionLod, uPopMinBound, uPopMaxBound);
    				    #endif // POP_BLENDING_ENABLED
    				#endif // POP_LOD_ENABLED

					worldNormal	= normalize(n.xyz);

				    #ifdef MODEL_TO_WORLD
					    pos = uModelToWorldMatrix * pos;
					    worldNormal	= mat3(uModelToWorldMatrix) * worldNormal;
				    #endif // MODEL_TO_WORLD

				    gl_Position =  uWorldToScreenMatrix * pos;
			    }
		    ",
		    "fragmentShader" : "
                #ifdef GL_ES
                    #ifdef GL_FRAGMENT_PRECISION_HIGH
                        precision highp float;
                    #else
                        precision mediump float;
                    #endif
                #endif

			    varying vec3 worldNormal;

			    void main(void)
			    {
				    gl_FragColor = vec4((normalize(worldNormal.xyz) + 1.0) * 0.5, 1.0);
			    }
		    "
	    }]
    }]
}
