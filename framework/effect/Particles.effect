// particles effect
{
	"name"	: "particles",
	
	"attributeBindings"	: {
		"offset"				: "geometry.vertex.attribute.offset",
		"position"				: "geometry.vertex.attribute.position",
		"size"					: "geometry.vertex.attribute.size",
		"color"					: "geometry.vertex.attribute.color",
		"time"					: "geometry.vertex.attribute.time",
		"oldPosition"			: "geometry.vertex.attribute.oldPosition",
		"rotation"				: "geometry.vertex.attribute.rotation",
		"spriteIndex"			: "geometry.vertex.attribute.spriteIndex"
	},
	
	"uniformBindings"	: {
		"diffuseColor"			: "material.diffuseColor",
		"diffuseMap"			: "material.diffuseMap",
		"modelToWorldMatrix"	: "transform.modelToWorldMatrix",
		"viewMatrix"			: "camera.viewMatrix",
		"projectionMatrix"		: "camera.projectionMatrix",
		"spriteSheetRows"		: "particles.spriteSheetRows",
		"spriteSheetColumns"	: "particles.spriteSheetColumns"
	},

	"macroBindings"	: {
		"WORLDSPACE_PARTICLES"		: "particles.worldspace",
		"SPRITE_SHEET"				: "particles.spritesheet",
		"TECHNIQUE_DIFFUSE_MAP"		: "material.diffuseMap",
		"TECHNIQUE_DIFFUSE_COLOR"	: "material.diffuseColor",
		"HAS_MODEL_TO_WORLD"		: "transform.modelToWorldMatrix"
	},
	
	"priority"			: 0,
	"blendMode"			: "additive",
	"depthTest"			: [false, "less"],
	"triangleCulling"	: "front",
	
	"passes"	: [{	
		"vertexShader"	: "
			attribute vec2 offset;
			attribute vec3 position;
			attribute float size;
			attribute vec3 color;
			attribute float time;
			attribute vec3 oldPosition;
			attribute float rotation;
			attribute float spriteIndex;

			uniform mat4 modelToWorldMatrix;
			uniform mat4 viewMatrix;
			uniform mat4 projectionMatrix;
			
			uniform float spriteSheetRows;
			uniform float spriteSheetColumns;
			
			varying vec2 vertexUV;
			varying float particleTime;

			void main(void)
			{
				particleTime = time;
			
				vec4 pos;
				
				#ifdef TECHNIQUE_DIFFUSE_MAP
					vertexUV = vec2(offset.x, -offset.y) + 0.5;
				
					#ifdef SPRITE_SHEET
						float index;
						float r;
						float c;
					
						index = mod(floor(spriteIndex), spriteSheetRows * spriteSheetColumns);
					
					//x - y * floor(x/y).
					// r = modf(index/spriteSheetRows, c)

						//r = floor(index / spriteSheetRows);
						r = fract(index / spriteSheetRows);
						c = index - spriteSheetRows * floor(index / spriteSheetRows);
						c /= spriteSheetColumns;
					
						vertexUV /= vec2(spriteSheetRows, spriteSheetColumns);
						vertexUV += vec2(r, c);
					#endif
				#endif
				
				#ifdef WORLDSPACE_PARTICLES	
					pos = viewMatrix * vec4(position, 1.0);
				#else
					pos = vec4(position, 1.0);
					
					#ifdef HAS_MODEL_TO_WORLD
						pos =  modelToWorldMatrix * pos;
					#endif
					
					pos = viewMatrix * pos;
				#endif
				
				float cosine = cos(rotation);
				float sine = sin(rotation);
				
				vec2 sinOffset = vec2(cosine * offset.x - sine * offset.y,
							  sine * offset.x + cosine * offset.y);
			
				// fake SizeOverTime
				float sizeOverTimer = size * (1.6 - 1.3 * time * time);
			
				// Sponza scale
				//size *= 0.05;
			
				pos += vec4(sinOffset, 0, 0) * sizeOverTimer;
			
				gl_Position = projectionMatrix * pos;
			}
		",
		"fragmentShader"	: "
			uniform vec4 diffuseColor;
			uniform sampler2D diffuseMap;
				
			varying vec2 vertexUV;
			varying float particleTime;
			
			void main(void)
			{			
				vec4 c;
			
				c = vec4(1., 1., 1., 1.);
			
				#ifdef TECHNIQUE_DIFFUSE_MAP
					c *= texture2D(diffuseMap, vertexUV);
				#endif
				
				#ifdef TECHNIQUE_DIFFUSE_COLOR
					c *= vec4(diffuseColor);
				#endif
				
				// fake ColorOverTime
				c *= 1.0 - particleTime * particleTime * particleTime * particleTime;
				
				gl_FragColor = c;
			}
		"
	}]
}
