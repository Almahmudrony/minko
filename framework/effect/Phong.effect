// phong effect
{
	"name"	: "phong",
	
	"priority"	: "opaque",
	
	"attributeBindings"	: {
		"position"				: "geometry.vertex.attribute.position",
		"uv"					: "geometry.vertex.attribute.uv",
		"normal"				: "geometry.vertex.attribute.normal",
		"tangent"				: "geometry.vertex.attribute.tangent",
		"boneIdsA"				: "geometry.vertex.attribute.boneIdsA",
		"boneIdsB"				: "geometry.vertex.attribute.boneIdsB",		
		"boneWeightsA"			: "geometry.vertex.attribute.boneWeightsA",
		"boneWeightsB"			: "geometry.vertex.attribute.boneWeightsB"
	},
	
	"uniformBindings"	: {
		"diffuseColor"			: "material.diffuseColor",
		"diffuseMap"			: "material.diffuseMap",
		"alphaMap"				: "material.alphaMap",
		"alphaThreshold"		: "material.alphaThreshold",
		"normalMap"				: "material.normalMap",
		"specularMap"			: "material.specularMap",
		"specularColor"			: { "property" : "material.specularColor", "default" : [ 1.0, 1.0, 1.0, 1.0 ] },
		"environmentMap"		: "material.environmentMap",
		"environmentAlpha"		: "material.environmentAlpha",
		"environmentType"		: "material.environmentType",
		"shininess"				: "material.shininess",
		"modelToWorldMatrix"	: "transform.modelToWorldMatrix",
		"worldToScreenMatrix"	: { "property" : "camera.worldToScreenMatrix", 		"source" : "renderer" },
		"cameraPosition"		: { "property" : "camera.position", 				"source" : "renderer" },
		"boneMatrices"			: { "property" : "geometry.boneMatrices",			"source" : "target" },
		"numBones"				: { "property" : "geometry.numBones",				"source" : "target" }
	},
	
	"stateBindings"	: {
        "blendMode"             : "material.blendMode",
        "colorMask"             : "material.colorMask",
        "depthMask"             : "material.depthMask",
        "depthFunc"             : "material.depthFunc",
        "triangleCulling"       : "material.triangleCulling",
        "stencilFunc"           : "material.stencilFunc",
        "stencilRef"            : "material.stencilRef",
        "stencilMask"           : "material.stencilMask",
        "stencilFailOp"         : "material.stencilFailOp",
        "stencilZFailOp"        : "material.stencilZFailOp",
        "stencilZPassOp"        : "material.stencilZPassOp",
        "scissorBox.x"          : { "property" : "scissorBox.x",        "source" : "renderer" },
        "scissorBox.y"          : { "property" : "scissorBox.y",        "source" : "renderer" },
        "scissorBox.width"      : { "property" : "scissorBox.width",    "source" : "renderer" },
        "scissorBox.height"     : { "property" : "scissorBox.height",   "source" : "renderer" },
        "priority"              : "material.priority"
	},

	"macroBindings"	: {
		"DIFFUSE_MAP"			: "material.diffuseMap",
		"NORMAL_MAP"			: "material.normalMap",
		"SPECULAR_MAP"			: "material.specularMap",
		"ALPHA_MAP"				: "material.alphaMap",
		"ALPHA_THRESHOLD"		: "material.alphaThreshold",
		"ENVIRONMENT_MAP"		: "material.environmentMap",
		"ENVIRONMENT_ALPHA"		: "material.environmentAlpha",
		"ENVIRONMENT_TYPE"		: "material.environmentType",
		"SHININESS"				: "material.shininess",
		"MODEL_TO_WORLD"		: "transform.modelToWorldMatrix",
		"NUM_BONES"				: { "property" : "geometry.numBones",	"source" : "target" }
	},

	"samplerStates" : {
		"diffuseMap"	: { "wrapMode" : "repeat", "textureFilter" : "linear", "mipFilter" : "linear" },
		"normalMap"		: { "wrapMode" : "repeat", "textureFilter" : "linear", "mipFilter" : "linear" },
		"specularMap"	: { "wrapMode" : "repeat", "textureFilter" : "linear", "mipFilter" : "linear" }
	},
	
	"defaultTechnique" : "single-pass",
	"colorMask"			: true,
	"stencilTest"		: ["always", 0, 1, ["keep", "keep", "keep"]],
	"scissorTest"		: false,
	"scissorBox"		: [0, 0, -1, -1],
	
	"techniques" : [
		{
			"name"				: "single-pass",
			"fallback" 			: "multi-pass",
			"blendMode"			: ["one", "zero"],
			"depthTest"			: [true, "less_equal"],
			"triangleCulling"	: "back",
			
			"uniformBindings" : {
				"ambientLights"				: { "property" : "ambientLights", "source" : "root" },
				"directionalLights"			: { "property" : "directionalLights", "source" : "root" },
				"spotLights"				: { "property" : "spotLights", "source" : "root" },
				"pointLights"				: { "property" : "pointLights", "source" : "root" }
			},
			
			"macroBindings" : {
				"NUM_AMBIENT_LIGHTS"		: { "property" : "ambientLights.length", "source" : "root" },
				"PRECOMPUTED_AMBIENT"		: { "property" : "sumAmbients", "source" : "root" },
				"NUM_DIRECTIONAL_LIGHTS"	: { "property" : "directionalLights.length", "source" : "root", "max" : 8 },
				"NUM_POINT_LIGHTS"			: { "property" : "pointLights.length", "source" : "root", "max" : 8 },
				"NUM_SPOT_LIGHTS"			: { "property" : "spotLights.length", "source" : "root", "max" : 8 }
			},
				
			"passes"	: [{
				"vertexShader" : "#pragma include('Phong.vertex.glsl')",
				"fragmentShader" : "#pragma include('Phong.fragment.glsl')"
			}]
		},

		{
			"name"				: "single-pass-no-glsl-struct",
			"fallback" 			: "multi-pass",
			"blendMode"			: ["one", "zero"],
			"depthTest"			: [true, "less_equal"],
			"triangleCulling"	: "back",
			
			"configuration"		: [ "no-glsl-struct" ],
			
			"uniformBindings" : {
				"ambientLights"				: { "property" : "ambientLights", "source" : "root" },
				"directionalLights"			: { "property" : "directionalLights", "source" : "root" },
				"spotLights"				: { "property" : "spotLights", "source" : "root" },
				"pointLights"				: { "property" : "pointLights", "source" : "root" }
			},
			
			"macroBindings" : {
				"NUM_AMBIENT_LIGHTS"		: { "property" : "ambientLights.length", "source" : "root" },
				"PRECOMPUTED_AMBIENT"		: { "property" : "sumAmbients", "source" : "root" },
				"NUM_DIRECTIONAL_LIGHTS"	: { "property" : "directionalLights.length", "source" : "root", "max" : 8 },
				"NUM_POINT_LIGHTS"			: { "property" : "pointLights.length", "source" : "root", "max" : 8 },
				"NUM_SPOT_LIGHTS"			: { "property" : "spotLights.length", "source" : "root", "max" : 8 }
			},
				
			"passes"	: [{
				"vertexShader" : "#pragma include('Phong.vertex.glsl')",
				"fragmentShader" : "#pragma include('Phong.fragment.glsl')"
			}]
		},

		{
			// fixme: implement multi-pass phong lighting
			"name" 		: "multi-pass",
			"passes" 	: [{
				"vertexShader" : "#pragma include('Basic.vertex.glsl')",
			"fragmentShader" : "#pragma include('Basic.fragment.glsl')"
			}]
		}
	]
}
